{"version":3,"file":"dialog-wrapper.component.js","sourceRoot":"","sources":["../../.tmp/components/dialog-wrapper.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACrD,OAAO,EACL,SAAS,EAAE,gBAAgB,EAAE,SAAS,EAAE,wBAAwB,EAAE,kBAAkB,EACrF,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;;IA4B7C;;;;OAIG;IACH,gCAAoB,QAAkC,EAAU,aAA4B;QAAxE,aAAQ,GAAR,QAAQ,CAA0B;QAAU,kBAAa,GAAb,aAAa,CAAe;KAAI;IAEhG;;;;OAIG;;;;;;IACH,6CAAY;;;;;IAAZ,UAAoB,SAAuC;QAA3D,iBAaC;QAZC,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAC/D,IAAI,QAAQ,GAAG,kBAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnF,IAAI,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,CAAC,OAAO,GAA6B,YAAY,CAAC,QAAQ,CAAC;QAC/D,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;QAC5B,EAAE,CAAC,CAAC,SAAS,KAAK,gBAAgB,CAAC,CAAC,CAAC;YACjC,UAAU,CAAC;gBACP,KAAI,CAAC,QAAQ,EAAE,CAAC;aACnB,EAAE,GAAG,CAAC,CAAC;SACX;QACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;KACrB;IAED;;OAEG;;;;IACH,oDAAmB;;;IAAnB;QAAA,iBAQC;QAPC,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QACjD,WAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAC,KAAU;YAC/E,KAAK,CAAC,eAAe,EAAE,CAAC;SACzB,CAAC,CAAC;QACH,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE;YAClC,KAAI,CAAC,aAAa,CAAC,YAAY,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;SACjD,EAAE,KAAK,CAAC,CAAC;KACX;IAEO,yCAAQ,GAAhB;QACE,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QACjD,IAAI,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QAC3D,EAAE,CAAC,CAAC,WAAW,CAAC;YAAC,WAAW,CAAC,KAAK,EAAE,CAAC;KACtC;;gBAtEF,SAAS,SAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,QAAQ,EAAE,6JAIX;iBACA;;;;gBAZyC,wBAAwB;gBAG1D,aAAa;;;4BAelB,SAAS,SAAC,SAAS,EAAE,EAAC,IAAI,EAAE,gBAAgB,EAAC;8BAK7C,SAAS,SAAC,WAAW;;iCAzBxB;;SAea,sBAAsB","sourcesContent":["import { BuiltInComponent } from './built-in.dialog';\r\nimport {\r\n  Component, ViewContainerRef, ViewChild, ComponentFactoryResolver, ReflectiveInjector, Type\r\n} from '@angular/core';\r\nimport {DialogComponent} from \"./dialog.component\";\r\nimport {DialogService} from \"./dialog.service\";\r\n\r\n@Component({\r\n  selector: 'dialog-wrapper',\r\n  template: `\r\n    <div #container class=\"modal fade\" style=\"display:block !important;\" role=\"dialog\">\r\n        <ng-template #element></ng-template>\r\n    </div>\r\n`\r\n})\r\nexport class DialogWrapperComponent {\r\n\r\n  /**\r\n   * Target element to insert dialog content component\r\n   */\r\n  @ViewChild('element', {read: ViewContainerRef}) public element: ViewContainerRef;\r\n\r\n  /**\r\n   * Link container DOM element\r\n   */\r\n  @ViewChild('container') public container: any;\r\n\r\n  /**\r\n   * Dialog content componet\r\n   * @type {DialogComponent}\r\n   */\r\n  private content: DialogComponent<any, any>;\r\n\r\n  /**\r\n   * Constructor\r\n   * @param {ComponentFactoryResolver} resolver\r\n   * @param {DialogService} dialogService\r\n   */\r\n  constructor(private resolver: ComponentFactoryResolver, private dialogService: DialogService) {}\r\n\r\n  /**\r\n   * Adds content dialog component to wrapper\r\n   * @param {Type<DialogComponent>} component\r\n   * @return {DialogComponent}\r\n   */\r\n  addComponent<T, T1>(component: Type<DialogComponent<T, T1>>) {\r\n    let factory = this.resolver.resolveComponentFactory(component);\r\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.element.injector);\r\n    let componentRef = factory.create(injector);\r\n    this.element.insert(componentRef.hostView);\r\n    this.content =  <DialogComponent<T, T1>> componentRef.instance;\r\n    this.content.wrapper = this;\r\n    if (component !== BuiltInComponent) {\r\n        setTimeout(() => {\r\n            this.setFocus();\r\n        }, 100);\r\n    }\r\n    return this.content;\r\n  }\r\n\r\n  /**\r\n   * Registers event handler to close dialog by click on backdrop\r\n   */\r\n  closeByClickOutside() {\r\n    const containerEl = this.container.nativeElement;\r\n    containerEl.querySelector('.modal-content').addEventListener('click', (event: any)=> {\r\n      event.stopPropagation();\r\n    });\r\n    containerEl.addEventListener('click', () => {\r\n        this.dialogService.removeDialog(this.content);\r\n    }, false);\r\n  }\r\n\r\n  private setFocus() {\r\n    const containerEl = this.container.nativeElement;\r\n    let autoFocusEl = containerEl.querySelector('[autofocus]');\r\n    if (autoFocusEl) autoFocusEl.focus();\r\n  }\r\n}\r\n"]}