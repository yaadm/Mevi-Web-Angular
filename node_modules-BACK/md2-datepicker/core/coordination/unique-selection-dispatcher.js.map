{"version":3,"sources":["core/coordination/unique-selection-dispatcher.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;AAMxC;;;;;;;;GAQG;AAEH;IAAA;QACU,eAAU,GAA0C,EAAE,CAAC;IAajE,CAAC;IAXC,yEAAyE;IACzE,4CAAM,GAAN,UAAO,EAAU,EAAE,IAAY;QAC7B,GAAG,CAAC,CAAiB,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,CAAC;YAAhC,IAAI,QAAQ,SAAA;YACf,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SACpB;IACH,CAAC;IAED,mDAAmD;IACnD,4CAAM,GAAN,UAAO,QAA6C;QAClD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAdH;QAAC,UAAU,EAAE;;mCAAA;IAeb,kCAAC;AAAD,CAdA,AAcC,IAAA","file":"unique-selection-dispatcher.js","sourcesContent":["import {Injectable} from '@angular/core';\r\n\r\n\r\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\r\nexport type MdUniqueSelectionDispatcherListener = (id: string, name: string) => void;\r\n\r\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\r\n@Injectable()\r\nexport class MdUniqueSelectionDispatcher {\r\n  private _listeners: MdUniqueSelectionDispatcherListener[] = [];\r\n\r\n  /** Notify other items that selection for the given name has been set. */\r\n  notify(id: string, name: string) {\r\n    for (let listener of this._listeners) {\r\n      listener(id, name);\r\n    }\r\n  }\r\n\r\n  /** Listen for future changes to item selection. */\r\n  listen(listener: MdUniqueSelectionDispatcherListener) {\r\n    this._listeners.push(listener);\r\n  }\r\n}\r\n"]}