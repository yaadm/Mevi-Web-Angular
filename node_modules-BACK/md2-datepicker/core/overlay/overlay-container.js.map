{"version":3,"sources":["core/overlay/overlay-container.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH;IAAA;IAwBA,CAAC;IArBC;;;;;OAKG;IACH,8CAAmB,GAAnB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAAC,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;OAGG;IACK,2CAAgB,GAAxB;QACE,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QAChD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;IACrC,CAAC;IACH,uBAAC;AAAD,CAxBA,AAwBC,IAAA","file":"overlay-container.js","sourcesContent":["/**\r\n * The OverlayContainer is the container in which all overlays will load.\r\n * It should be provided in the root component to ensure it is properly shared.\r\n */\r\nexport class OverlayContainer {\r\n  private _containerElement: HTMLElement;\r\n\r\n  /**\r\n   * This method returns the overlay container element.  It will lazily\r\n   * create the element the first time  it is called to facilitate using\r\n   * the container in non-browser environments.\r\n   * @returns {HTMLElement} the container element\r\n   */\r\n  getContainerElement(): HTMLElement {\r\n    if (!this._containerElement) { this._createContainer(); }\r\n    return this._containerElement;\r\n  }\r\n\r\n  /**\r\n   * Create the overlay container element, which is simply a div\r\n   * with the 'md-overlay-container' class on the document body.\r\n   */\r\n  private _createContainer(): void {\r\n    let container = document.createElement('div');\r\n    container.classList.add('md-overlay-container');\r\n    document.body.appendChild(container);\r\n    this._containerElement = container;\r\n  }\r\n}\r\n"]}