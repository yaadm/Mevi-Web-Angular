{"version":3,"sources":["core/overlay/position/viewport-ruler.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;AAIxC;;;GAGG;AAEH;IAAA;IAoDA,CAAC;IAnDC,wFAAwF;IACxF,0BAA0B;IAG1B,mDAAmD;IACnD,uCAAe,GAAf;QACE,oFAAoF;QACpF,mFAAmF;QACnF,2FAA2F;QAC3F,0FAA0F;QAC1F,8EAA8E;QAC9E,sEAAsE;QACtE,2FAA2F;QAC3F,oFAAoF;QACpF,2BAA2B;QAC3B,IAAM,YAAY,GAAG,QAAQ,CAAC,eAAe,CAAC,qBAAqB,EAAE,CAAC;QACtE,IAAM,cAAc,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,CAAC;QACpE,IAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC;QAClC,IAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC;QAEhC,MAAM,CAAC;YACL,GAAG,EAAE,cAAc,CAAC,GAAG;YACvB,IAAI,EAAE,cAAc,CAAC,IAAI;YACzB,MAAM,EAAE,cAAc,CAAC,GAAG,GAAG,MAAM;YACnC,KAAK,EAAE,cAAc,CAAC,IAAI,GAAG,KAAK;YAClC,cAAM;YACN,YAAK;SACN,CAAC;IACJ,CAAC;IAGD;;;OAGG;IACH,iDAAyB,GAAzB,UAA0B,YAA+D;QAA/D,4BAA+D,GAA/D,eAAe,QAAQ,CAAC,eAAe,CAAC,qBAAqB,EAAE;QACvF,2FAA2F;QAC3F,0FAA0F;QAC1F,4FAA4F;QAC5F,oFAAoF;QACpF,wFAAwF;QACxF,sCAAsC;QACtC,IAAM,GAAG,GAAI,YAAY,CAAC,GAAG,GAAG,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC;YAC7D,CAAC,YAAY,CAAC,GAAG;YACjB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;QAC5B,IAAM,IAAI,GAAG,YAAY,CAAC,IAAI,GAAG,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC;YAC/D,CAAC,YAAY,CAAC,IAAI;YAClB,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;QAE7B,MAAM,CAAC,EAAC,QAAG,EAAE,UAAI,EAAC,CAAC;IACrB,CAAC;IApDH;QAAC,UAAU,EAAE;;qBAAA;IAqDb,oBAAC;AAAD,CApDA,AAoDC,IAAA","file":"viewport-ruler.js","sourcesContent":["import {Injectable} from '@angular/core';\r\n\r\n\r\n\r\n/**\r\n * Simple utility for getting the bounds of the browser viewport.\r\n * TODO: internal\r\n */\r\n@Injectable()\r\nexport class ViewportRuler {\r\n  // TODO(jelbourn): cache the document's bounding rect and only update it when the window\r\n  // is resized (debounced).\r\n\r\n\r\n  /** Gets a ClientRect for the viewport's bounds. */\r\n  getViewportRect(): ClientRect {\r\n    // Use the document element's bounding rect rather than the window scroll properties\r\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\r\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\r\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\r\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\r\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\r\n    // We use the documentElement instead of the body because, by default (without a css reset)\r\n    // browsers typically give the document body an 8px margin, which is not included in\r\n    // getBoundingClientRect().\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n    const scrollPosition = this.getViewportScrollPosition(documentRect);\r\n    const height = window.innerHeight;\r\n    const width = window.innerWidth;\r\n\r\n    return {\r\n      top: scrollPosition.top,\r\n      left: scrollPosition.left,\r\n      bottom: scrollPosition.top + height,\r\n      right: scrollPosition.left + width,\r\n      height,\r\n      width,\r\n    };\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets the (top, left) scroll position of the viewport.\r\n   * @param documentRect\r\n   */\r\n  getViewportScrollPosition(documentRect = document.documentElement.getBoundingClientRect()) {\r\n    // The top-left-corner of the viewport is determined by the scroll position of the document\r\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\r\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\r\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\r\n    // `document.documentElement` works consistently, where the `top` and `left` values will\r\n    // equal negative the scroll position.\r\n    const top =  documentRect.top < 0 && document.body.scrollTop == 0 ?\r\n        -documentRect.top :\r\n        document.body.scrollTop;\r\n    const left = documentRect.left < 0 && document.body.scrollLeft == 0 ?\r\n        -documentRect.left :\r\n        document.body.scrollLeft;\r\n\r\n    return {top, left};\r\n  }\r\n}\r\n"]}