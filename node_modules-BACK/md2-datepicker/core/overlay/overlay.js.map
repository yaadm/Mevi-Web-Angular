{"version":3,"sources":["core/overlay/overlay.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,wBAAwB,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAC,MAAM,eAAe;OACrF,EAAC,YAAY,EAAC,MAAM,iBAAiB;OACrC,EAAC,aAAa,EAAC,MAAM,2BAA2B;OAChD,EAAC,UAAU,EAAC,MAAM,eAAe;OAEjC,EAAC,sBAAsB,EAAC,MAAM,qCAAqC;OACnE,EAAC,aAAa,EAAC,MAAM,2BAA2B;OAChD,EAAC,gBAAgB,EAAC,MAAM,qBAAqB;AAEpD,8BAA8B;AAC9B,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,oDAAoD;AACpD,IAAI,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AAGtC;;;;;;;GAOG;AAEH;IACE,iBAAoB,iBAAmC,EACnC,yBAAmD,EACnD,gBAAwC,EACxC,OAAuB,EACvB,SAAmB;QAJnB,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,8BAAyB,GAAzB,yBAAyB,CAA0B;QACnD,qBAAgB,GAAhB,gBAAgB,CAAwB;QACxC,YAAO,GAAP,OAAO,CAAgB;QACvB,cAAS,GAAT,SAAS,CAAU;IAAG,CAAC;IAE3C;;;;OAIG;IACH,wBAAM,GAAN,UAAO,KAAkC;QAAlC,qBAAkC,GAAlC,oBAAkC;QACvC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,KAAK,CAAC,CAAC;IAClE,CAAC;IAED;;;OAGG;IACH,0BAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACK,oCAAkB,GAA1B;QACE,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,EAAE,GAAG,gBAAc,YAAY,EAAI,CAAC;QACzC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAEtC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAE/D,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/F,CAAC;IAED;;;;;OAKG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB,EAAE,KAAmB;QAC9D,MAAM,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACnE,CAAC;IAxDF;QAAC,UAAU,EAAE;;eAAA;IAyDd,cAAC;AAAD,CAxDA,AAwDC,IAAA;AAED,yDAAyD;AACzD,OAAO,IAAM,iBAAiB,GAAG;IAC/B,aAAa;IACb,sBAAsB;IACtB,OAAO;IACP,gBAAgB;CACjB,CAAC","file":"overlay.js","sourcesContent":["import {ComponentFactoryResolver, Injectable, ApplicationRef, Injector} from '@angular/core';\r\nimport {OverlayState} from './overlay-state';\r\nimport {DomPortalHost} from '../portal/dom-portal-host';\r\nimport {OverlayRef} from './overlay-ref';\r\n\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\nimport {ViewportRuler} from './position/viewport-ruler';\r\nimport {OverlayContainer} from './overlay-container';\r\n\r\n/** Next overlay unique ID. */\r\nlet nextUniqueId = 0;\r\n\r\n/** The default state for newly created overlays. */\r\nlet defaultState = new OverlayState();\r\n\r\n\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\r\n */\r\n @Injectable()\r\nexport class Overlay {\r\n  constructor(private _overlayContainer: OverlayContainer,\r\n              private _componentFactoryResolver: ComponentFactoryResolver,\r\n              private _positionBuilder: OverlayPositionBuilder,\r\n              private _appRef: ApplicationRef,\r\n              private _injector: Injector) {}\r\n\r\n  /**\r\n   * Creates an overlay.\r\n   * @param state State to apply to the overlay.\r\n   * @returns A reference to the created overlay.\r\n   */\r\n  create(state: OverlayState = defaultState): OverlayRef {\r\n    return this._createOverlayRef(this._createPaneElement(), state);\r\n  }\r\n\r\n  /**\r\n   * Returns a position builder that can be used, via fluent API,\r\n   * to construct and configure a position strategy.\r\n   */\r\n  position() {\r\n    return this._positionBuilder;\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n   * @returns Promise resolving to the created element.\r\n   */\r\n  private _createPaneElement(): HTMLElement {\r\n    let pane = document.createElement('div');\r\n    pane.id = `md-overlay-${nextUniqueId++}`;\r\n    pane.classList.add('md-overlay-pane');\r\n\r\n    this._overlayContainer.getContainerElement().appendChild(pane);\r\n\r\n    return pane;\r\n  }\r\n\r\n  /**\r\n   * Create a DomPortalHost into which the overlay content can be loaded.\r\n   * @param pane The DOM element to turn into a portal host.\r\n   * @returns A portal host for the given DOM element.\r\n   */\r\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\r\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\r\n  }\r\n\r\n  /**\r\n   * Creates an OverlayRef for an overlay in the given DOM element.\r\n   * @param pane DOM element for the overlay\r\n   * @param state\r\n   * @returns {OverlayRef}\r\n   */\r\n  private _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\r\n    return new OverlayRef(this._createPortalHost(pane), pane, state);\r\n  }\r\n}\r\n\r\n/** Providers for Overlay and its related injectables. */\r\nexport const OVERLAY_PROVIDERS = [\r\n  ViewportRuler,\r\n  OverlayPositionBuilder,\r\n  Overlay,\r\n  OverlayContainer,\r\n];\r\n"]}