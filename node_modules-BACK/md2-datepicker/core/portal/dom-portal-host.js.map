{"version":3,"sources":["core/portal/dom-portal-host.ts"],"names":[],"mappings":"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","file":"dom-portal-host.js","sourcesContent":["import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ApplicationRef,\r\n  Injector,\r\n} from '@angular/core';\r\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\r\n\r\n\r\n/**\r\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n *\r\n * This is the only part of the portal core that directly touches the DOM.\r\n */\r\nexport class DomPortalHost extends BasePortalHost {\r\n  constructor(\r\n      private _hostDomElement: Element,\r\n      private _componentFactoryResolver: ComponentFactoryResolver,\r\n      private _appRef: ApplicationRef,\r\n      private _defaultInjector: Injector) {\r\n    super();\r\n  }\r\n\r\n  /** Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver. */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    let componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    let componentRef: ComponentRef<T>;\r\n\r\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n    // for the component (in terms of Angular's component tree, not rendering).\r\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n    // and then manually attach the ChangeDetector for that component to the application (which\r\n    // happens automatically when using a ViewContainer).\r\n    if (portal.viewContainerRef) {\r\n      componentRef = portal.viewContainerRef.createComponent(\r\n          componentFactory,\r\n          portal.viewContainerRef.length,\r\n          portal.injector || portal.viewContainerRef.parentInjector);\r\n\r\n      this.setDisposeFn(() => componentRef.destroy());\r\n    } else {\r\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\r\n\r\n      // When creating a component outside of a ViewContainer, we need to manually register\r\n      // its ChangeDetector with the application. This API is unfortunately not yet published\r\n      // in Angular core. The change detector must also be deregistered when the component\r\n      // is destroyed to prevent memory leaks.\r\n      //\r\n      // See https://github.com/angular/angular/pull/12674\r\n      let changeDetectorRef = componentRef.changeDetectorRef;\r\n      (this._appRef as any).registerChangeDetector(changeDetectorRef);\r\n\r\n      this.setDisposeFn(() => {\r\n        (this._appRef as any).unregisterChangeDetector(changeDetectorRef);\r\n\r\n        // Normally the ViewContainer will remove the component's nodes from the DOM.\r\n        // Without a ViewContainer, we need to manually remove the nodes.\r\n        let componentRootNode = this._getComponentRootNode(componentRef);\r\n        if (componentRootNode.parentNode) {\r\n          componentRootNode.parentNode.removeChild(componentRootNode);\r\n        }\r\n\r\n        componentRef.destroy();\r\n      });\r\n    }\r\n\r\n    // At this point the component has been instantiated, so we move it to the location in the DOM\r\n    // where we want it to be rendered.\r\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\r\n\r\n    return componentRef;\r\n  }\r\n\r\n  attachTemplatePortal(portal: TemplatePortal): Map<string, any> {\r\n    let viewContainer = portal.viewContainerRef;\r\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef);\r\n\r\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\r\n\r\n    this.setDisposeFn((() => {\r\n      let index = viewContainer.indexOf(viewRef);\r\n      if (index != -1) {\r\n        viewContainer.remove(index);\r\n      }\r\n    }));\r\n\r\n    // TODO(jelbourn): Return locals from view.\r\n    return new Map<string, any>();\r\n  }\r\n\r\n  dispose(): void {\r\n    super.dispose();\r\n    if (this._hostDomElement.parentNode != null) {\r\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\r\n    }\r\n  }\r\n\r\n  /** Gets the root HTMLElement for an instantiated component. */\r\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n  }\r\n}\r\n"]}