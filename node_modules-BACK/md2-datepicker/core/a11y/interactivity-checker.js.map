{"version":3,"sources":["core/a11y/interactivity-checker.ts"],"names":[],"mappings":"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","file":"interactivity-checker.js","sourcesContent":["import {Injectable} from '@angular/core';\r\n\r\n/**\r\n * Utility for checking the interactivity of an element, such as whether is is focusable or\r\n * tabbable.\r\n *\r\n * NOTE: Currently does not capture any special element behaviors, browser quirks, or edge cases.\r\n * This is a basic/naive starting point onto which further behavior will be added.\r\n *\r\n * This class uses instance methods instead of static functions so that alternate implementations\r\n * can be injected.\r\n *\r\n * TODO(jelbourn): explore using ally.js directly for its significantly more robust\r\n * checks (need to evaluate payload size, performance, and compatibility with tree-shaking).\r\n */\r\n@Injectable()\r\nexport class InteractivityChecker {\r\n\r\n  /** Gets whether an element is disabled. */\r\n  isDisabled(element: HTMLElement) {\r\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\r\n    // a form control inside of a disabled form, but should capture the most common cases.\r\n    return element.hasAttribute('disabled');\r\n  }\r\n\r\n  /**\r\n   * Gets whether an element is visible for the purposes of interactivity.\r\n   *\r\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\r\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\r\n   */\r\n  isVisible(element: HTMLElement) {\r\n    // There are additional special cases that this does not capture, but this will work for\r\n    // the most common cases.\r\n\r\n    // Use logic from jQuery to check for `display: none`.\r\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\r\n    if (!(element.offsetWidth || element.offsetHeight || element.getClientRects().length)) {\r\n      return false;\r\n    }\r\n\r\n    // Check for css `visibility` property.\r\n    // TODO(jelbourn): do any browsers we support return an empty string instead of 'visible'?\r\n    return getComputedStyle(element).getPropertyValue('visibility') == 'visible';\r\n  }\r\n\r\n  /**\r\n   * Gets whether an element can be reached via Tab key.\r\n   * Assumes that the element has already been checked with isFocusable.\r\n   */\r\n  isTabbable(element: HTMLElement) {\r\n    // Again, naive approach that does not capture many special cases and browser quirks.\r\n    return element.tabIndex >= 0;\r\n  }\r\n\r\n  /** Gets whether an element can be focused by the user. */\r\n  isFocusable(element: HTMLElement): boolean {\r\n    // Perform checks in order of left to most expensive.\r\n    // Again, naive approach that does not capture many edge cases and browser quirks.\r\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\r\n  }\r\n}\r\n\r\n/** Gets whether an element's  */\r\nfunction isNativeFormElement(element: Node) {\r\n  let nodeName = element.nodeName.toLowerCase();\r\n  return nodeName === 'input' ||\r\n      nodeName === 'select' ||\r\n      nodeName === 'button' ||\r\n      nodeName === 'textarea';\r\n}\r\n\r\n/** Gets whether an element is an <input type=\"hidden\">. */\r\nfunction isHiddenInput(element: HTMLElement): boolean {\r\n  return isInputElement(element) && element.type == 'hidden';\r\n}\r\n\r\n/** Gets whether an element is an anchor that has an href attribute. */\r\nfunction isAnchorWithHref(element: HTMLElement): boolean {\r\n  return isAnchorElement(element) && element.hasAttribute('href');\r\n}\r\n\r\n/** Gets whether an element is an input element. */\r\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\r\n  return element.nodeName == 'input';\r\n}\r\n\r\n/** Gets whether an element is an anchor element. */\r\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\r\n  return element.nodeName.toLowerCase() == 'a';\r\n}\r\n\r\n/** Gets whether an element has a valid tabindex. */\r\nfunction hasValidTabIndex(element: HTMLElement): boolean {\r\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\r\n    return false;\r\n  }\r\n\r\n  let tabIndex = element.getAttribute('tabindex');\r\n\r\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\r\n  if (tabIndex == '-32768') {\r\n    return false;\r\n  }\r\n\r\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\r\n}\r\n\r\n/**\r\n * Gets whether an element is potentially focusable without taking current visible/disabled state\r\n * into account.\r\n */\r\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\r\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\r\n  if (isHiddenInput(element)) {\r\n    return false;\r\n  }\r\n\r\n  return isNativeFormElement(element) ||\r\n      isAnchorWithHref(element) ||\r\n      element.hasAttribute('contenteditable') ||\r\n      hasValidTabIndex(element);\r\n}\r\n\r\n"]}