{"version":3,"sources":["datepicker/dateUtil.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;AAG1C;IAAA;IAwSA,CAAC;IAvSC;;;;OAIG;IACH,yCAAmB,GAAnB,UAAoB,IAAU;QAC5B,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IAC9F,CAAC;IAED;;;;OAIG;IACH,4CAAsB,GAAtB,UAAuB,IAAU;QAC/B,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IACxE,CAAC;IAED;;;;OAIG;IACH,wCAAkB,GAAlB,UAAmB,IAAU;QAC3B,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IAClG,CAAC;IAED;;;;OAIG;IACH,4CAAsB,GAAtB,UAAuB,IAAU;QAC/B,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IAClG,CAAC;IAED;;;;;OAKG;IACH,wCAAkB,GAAlB,UAAmB,EAAQ,EAAE,EAAQ;QACnC,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,QAAQ,EAAE,CAAC;IAClF,CAAC;IAED;;;;;OAKG;IACH,+BAAS,GAAT,UAAU,EAAQ,EAAE,EAAQ;QAC1B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACzE,CAAC;IAED;;;;;OAKG;IACH,mCAAa,GAAb,UAAc,SAAe,EAAE,OAAa;QAC1C,IAAI,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACH,uCAAiB,GAAjB,UAAkB,SAAe,EAAE,OAAa;QAC9C,IAAI,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACH,qCAAe,GAAf,UAAgB,EAAQ,EAAE,EAAQ;QAChC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACtE,CAAC;IAED;;;;OAIG;IACH,oCAAc,GAAd,UAAe,IAAU;QACvB,IAAI,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzE,CAAC;IAED;;;;;OAKG;IACH,sCAAgB,GAAhB,UAAiB,IAAU,EAAE,eAAuB;QAClD,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,GAAG,eAAe,CAAC,CAAC;IAC7H,CAAC;IAED;;;;;OAKG;IACH,oCAAc,GAAd,UAAe,IAAU,EAAE,aAAqB;QAC9C,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,aAAa,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IAC3H,CAAC;IAED;;;;;OAKG;IACH,mCAAa,GAAb,UAAc,IAAU,EAAE,YAAoB;QAC5C,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IAC1H,CAAC;IAED;;;;;;;OAOG;IACH,qCAAe,GAAf,UAAgB,IAAU,EAAE,cAAsB;QAChD,qFAAqF;QACrF,uEAAuE;QACvE,mFAAmF;QACnF,2FAA2F;QAC3F,IAAI,iBAAiB,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,cAAc,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QAC9H,IAAI,mBAAmB,GAAG,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,CAAC;QACzE,EAAE,CAAC,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACzC,iBAAiB,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACjD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,CAAC,iBAAiB,CAAC;IAC3B,CAAC;IAED;;;;;;;;OAQG;IACH,sCAAgB,GAAhB,UAAiB,KAAW,EAAE,GAAS;QACrC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChG,CAAC;IAED;;;;OAIG;IACH,wCAAkB,GAAlB,UAAmB,IAAU;QAC3B,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IAC9H,CAAC;IAED;;;;OAIG;IACH,iCAAW,GAAX,UAAY,IAAU;QACpB,MAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAChE,CAAC;IAED;;;OAGG;IACH,2CAAqB,GAArB,UAAsB,IAAU;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED;;;;;;;;OAQG;IACH,0CAAoB,GAApB,UAAqB,SAAc;QACjC,IAAI,IAAU,CAAC;QACf,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7B,CAAC;QACD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACH,uCAAiB,GAAjB,UAAkB,IAAU,EAAE,OAAa,EAAE,OAAa;QACxD,IAAI,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;QAC9F,IAAI,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;QAC9F,MAAM,CAAC,CAAC,CAAC,iBAAiB,IAAI,iBAAiB,IAAI,cAAc,CAAC;YAChE,CAAC,CAAC,iBAAiB,IAAI,iBAAiB,IAAI,cAAc,CAAC,CAAC;IAChE,CAAC;IAED;;;;;;OAMG;IACH,oCAAc,GAAd,UAAe,IAAU,EAAE,aAAqB;QAC9C,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,aAAa,GAAG,EAAE,CAAC,CAAC;IACxD,CAAC;IAED;;;;;;;;OAQG;IACH,qCAAe,GAAf,UAAgB,KAAW,EAAE,GAAS;QACpC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC;IAED;;;;;;OAMG;IACH,+BAAS,GAAT,UAAU,IAAU,EAAE,OAAa,EAAE,OAAa;QAChD,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;YAC9B,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1C,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;YAC9B,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1C,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,0CAAoB,GAApB,UAAqB,IAAS;QAC5B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,wCAAkB,GAAlB,UAAmB,IAAU,EAAE,OAAa,EAAE,OAAa;QACzD,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC5B,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAE9B,MAAM,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,EAAE,GAAG,IAAI,IAAI,OAAO,CAAC,QAAQ,EAAE,IAAI,KAAK,CAAC;YAC9E,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,EAAE,GAAG,IAAI,IAAI,OAAO,CAAC,QAAQ,EAAE,IAAI,KAAK,CAAC,CAAC;IAC9E,CAAC;IAxSH;QAAC,UAAU,EAAE;;mBAAA;IAySb,kBAAC;AAAD,CAxSA,AAwSC,IAAA","file":"dateUtil.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class Md2DateUtil {\r\n  /**\r\n   * Gets the first day of the month for the given date's month.\r\n   * @param {Date} date\r\n   * @returns {Date}\r\n   */\r\n  getFirstDateOfMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Gets the number of days in the month for the given date's month.\r\n   * @param date\r\n   * @returns {number}\r\n   */\r\n  getNumberOfDaysInMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\r\n  }\r\n\r\n  /**\r\n   * Get an arbitrary date in the month after the given date's month.\r\n   * @param date\r\n   * @returns {Date}\r\n   */\r\n  getDateInNextMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth() + 1, 1, date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Get an arbitrary date in the month before the given date's month.\r\n   * @param date\r\n   * @returns {Date}\r\n   */\r\n  getDateInPreviousMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth() - 1, 1, date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Gets whether two dates have the same month and year.\r\n   * @param {Date} d1\r\n   * @param {Date} d2\r\n   * @returns {boolean}\r\n   */\r\n  isSameMonthAndYear(d1: Date, d2: Date) {\r\n    return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();\r\n  }\r\n\r\n  /**\r\n   * Gets whether two dates are the same day (not not necesarily the same time).\r\n   * @param {Date} d1\r\n   * @param {Date} d2\r\n   * @returns {boolean}\r\n   */\r\n  isSameDay(d1: Date, d2: Date) {\r\n    return d1.getDate() == d2.getDate() && this.isSameMonthAndYear(d1, d2);\r\n  }\r\n\r\n  /**\r\n   * Gets whether a date is in the month immediately after some date.\r\n   * @param {Date} startDate The date from which to compare.\r\n   * @param {Date} endDate The date to check.\r\n   * @returns {boolean}\r\n   */\r\n  isInNextMonth(startDate: Date, endDate: Date) {\r\n    let nextMonth = this.getDateInNextMonth(startDate);\r\n    return this.isSameMonthAndYear(nextMonth, endDate);\r\n  }\r\n\r\n  /**\r\n   * Gets whether a date is in the month immediately before some date.\r\n   * @param {Date} startDate The date from which to compare.\r\n   * @param {Date} endDate The date to check.\r\n   * @returns {boolean}\r\n   */\r\n  isInPreviousMonth(startDate: Date, endDate: Date) {\r\n    let previousMonth = this.getDateInPreviousMonth(startDate);\r\n    return this.isSameMonthAndYear(endDate, previousMonth);\r\n  }\r\n\r\n  /**\r\n   * Gets the midpoint between two dates.\r\n   * @param {Date} d1\r\n   * @param {Date} d2\r\n   * @returns {Date}\r\n   */\r\n  getDateMidpoint(d1: Date, d2: Date) {\r\n    return this.createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);\r\n  }\r\n\r\n  /**\r\n   * Gets the week of the month that a given date occurs in.\r\n   * @param {Date} date\r\n   * @returns {number} Index of the week of the month (zero-based).\r\n   */\r\n  getWeekOfMonth(date: Date) {\r\n    let firstDayOfMonth = this.getFirstDateOfMonth(date);\r\n    return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of minutes. Number of minutes can be negative.\r\n   * @param {Date} date\r\n   * @param {number} numberOfMinutes\r\n   * @returns {Date}\r\n   */\r\n  incrementMinutes(date: Date, numberOfMinutes: number) {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes() + numberOfMinutes);\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of hours. Number of hours can be negative.\r\n   * @param {Date} date\r\n   * @param {number} numberOfHours\r\n   * @returns {Date}\r\n   */\r\n  incrementHours(date: Date, numberOfHours: number) {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + numberOfHours, date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of days. Number of days can be negative.\r\n   * @param {Date} date\r\n   * @param {number} numberOfDays\r\n   * @returns {Date}\r\n   */\r\n  incrementDays(date: Date, numberOfDays: number) {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays, date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of months. Number of months can be negative.\r\n   * If the date of the given month does not match the target month, the date will be set to the\r\n   * last day of the month.\r\n   * @param {Date} date\r\n   * @param {number} numberOfMonths\r\n   * @returns {Date}\r\n   */\r\n  incrementMonths(date: Date, numberOfMonths: number) {\r\n    // If the same date in the target month does not actually exist, the Date object will\r\n    // automatically advance *another* month by the number of missing days.\r\n    // For example, if you try to go from Jan. 30 to Feb. 30, you'll end up on March 2.\r\n    // So, we check if the month overflowed and go to the last day of the target month instead.\r\n    let dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1, date.getHours(), date.getMinutes());\r\n    let numberOfDaysInMonth = this.getNumberOfDaysInMonth(dateInTargetMonth);\r\n    if (numberOfDaysInMonth < date.getDate()) {\r\n      dateInTargetMonth.setDate(numberOfDaysInMonth);\r\n    } else {\r\n      dateInTargetMonth.setDate(date.getDate());\r\n    }\r\n\r\n    return dateInTargetMonth;\r\n  }\r\n\r\n  /**\r\n   * Get the integer distance between two months. This *only* considers the month and year\r\n   * portion of the Date instances.\r\n   *\r\n   * @param {Date} start\r\n   * @param {Date} end\r\n   * @returns {number} Number of months between `start` and `end`. If `end` is before `start`\r\n   *     chronologically, this number will be negative.\r\n   */\r\n  getMonthDistance(start: Date, end: Date) {\r\n    return (12 * (end.getFullYear() - start.getFullYear())) + (end.getMonth() - start.getMonth());\r\n  }\r\n\r\n  /**\r\n   * Gets the last day of the month for the given date.\r\n   * @param {Date} date\r\n   * @returns {Date}\r\n   */\r\n  getLastDateOfMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth(), this.getNumberOfDaysInMonth(date), date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Checks whether a date is valid.\r\n   * @param {Date} date\r\n   * @return {boolean} Whether the date is a valid Date.\r\n   */\r\n  isValidDate(date: Date) {\r\n    return date != null && date.getTime && !isNaN(date.getTime());\r\n  }\r\n\r\n  /**\r\n   * Sets a date's time to midnight.\r\n   * @param {Date} date\r\n   */\r\n  setDateTimeToMidnight(date: Date) {\r\n    if (this.isValidDate(date)) {\r\n      date.setHours(0, 0, 0, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a date with the time set to midnight.\r\n   * Drop-in replacement for two forms of the Date constructor:\r\n   * 1. No argument for Date representing now.\r\n   * 2. Single-argument value representing number of seconds since Unix Epoch\r\n   * or a Date object.\r\n   * @param {number|Date=} opt_value\r\n   * @return {Date} New date with time set to midnight.\r\n   */\r\n  createDateAtMidnight(opt_value: any) {\r\n    let date: Date;\r\n    if (!opt_value) {\r\n      date = new Date();\r\n    } else {\r\n      date = new Date(opt_value);\r\n    }\r\n    this.setDateTimeToMidnight(date);\r\n    return date;\r\n  }\r\n\r\n  /**\r\n   * Checks if a date is within a min and max range, ignoring the time component.\r\n   * If minDate or maxDate are not dates, they are ignored.\r\n   * @param {Date} date\r\n   * @param {Date} minDate\r\n   * @param {Date} maxDate\r\n   */\r\n  isDateWithinRange(date: Date, minDate: Date, maxDate: Date) {\r\n    let dateAtMidnight = this.createDateAtMidnight(date);\r\n    let minDateAtMidnight = this.isValidDate(minDate) ? this.createDateAtMidnight(minDate) : null;\r\n    let maxDateAtMidnight = this.isValidDate(maxDate) ? this.createDateAtMidnight(maxDate) : null;\r\n    return (!minDateAtMidnight || minDateAtMidnight <= dateAtMidnight) &&\r\n      (!maxDateAtMidnight || maxDateAtMidnight >= dateAtMidnight);\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of years. Number of years can be negative.\r\n   * See `incrementMonths` for notes on overflow for specific dates.\r\n   * @param {Date} date\r\n   * @param {number} numberOfYears\r\n   * @returns {Date}\r\n   */\r\n  incrementYears(date: Date, numberOfYears: number) {\r\n    return this.incrementMonths(date, numberOfYears * 12);\r\n  }\r\n\r\n  /**\r\n   * Get the integer distance between two years. This *only* considers the year portion of the\r\n   * Date instances.\r\n   *\r\n   * @param {Date} start\r\n   * @param {Date} end\r\n   * @returns {number} Number of months between `start` and `end`. If `end` is before `start`\r\n   *     chronologically, this number will be negative.\r\n   */\r\n  getYearDistance(start: Date, end: Date) {\r\n    return end.getFullYear() - start.getFullYear();\r\n  }\r\n\r\n  /**\r\n   * Clamps a date between a minimum and a maximum date.\r\n   * @param {Date} date Date to be clamped\r\n   * @param {Date=} minDate Minimum date\r\n   * @param {Date=} maxDate Maximum date\r\n   * @return {Date}\r\n   */\r\n  clampDate(date: Date, minDate: Date, maxDate: Date) {\r\n    let boundDate = date;\r\n    if (minDate && date < minDate) {\r\n      boundDate = new Date(minDate.getTime());\r\n    }\r\n    if (maxDate && date > maxDate) {\r\n      boundDate = new Date(maxDate.getTime());\r\n    }\r\n    return boundDate;\r\n  }\r\n\r\n  /**\r\n   * Extracts and parses the timestamp from a DOM node.\r\n   * @param  {HTMLElement} node Node from which the timestamp will be extracted.\r\n   * @return {number} Time since epoch.\r\n   */\r\n  getTimestampFromNode(node: any) {\r\n    if (node && node.hasAttribute('data-timestamp')) {\r\n      return Number(node.getAttribute('data-timestamp'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if a month is within a min and max range, ignoring the date and time components.\r\n   * If minDate or maxDate are not dates, they are ignored.\r\n   * @param {Date} date\r\n   * @param {Date} minDate\r\n   * @param {Date} maxDate\r\n   */\r\n  isMonthWithinRange(date: Date, minDate: Date, maxDate: Date) {\r\n    let month = date.getMonth();\r\n    let year = date.getFullYear();\r\n\r\n    return (!minDate || minDate.getFullYear() < year || minDate.getMonth() <= month) &&\r\n      (!maxDate || maxDate.getFullYear() > year || maxDate.getMonth() >= month);\r\n  }\r\n}"]}