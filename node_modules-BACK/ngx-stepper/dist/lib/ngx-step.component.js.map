{"version":3,"sources":["../../src/lib/ngx-step.component.ts"],"names":[],"mappings":";;AAAA,sCAKuB;AAMvB,6DAE+B;AAG/B;IAYE,0BAAoB,kBAAqC;QAAzD,iBAIC;QAJmB,uBAAkB,GAAlB,kBAAkB,CAAmB;QACvD,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAC,OAA4B;YAC9E,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,mCAAQ,GAAf;QACE,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAEM,mCAAQ,GAAf;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IAChE,CAAC;IA4DH,uBAAC;AAAD,CApFA,AAoFC;AA3DM,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,0gFA6CT;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,+BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,uCAAiB,GAAG;CAC1B,EAF6F,CAE7F,CAAC;AACK,+BAAc,GAA2C;IAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;IAC3B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;CAC7B,CAAC;AAnFW,4CAAgB","file":"ngx-step.component.js","sourceRoot":"","sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport {\r\n  NgxStepperComponent\r\n} from './ngx-stepper.component';\r\n\r\nimport {\r\n  NgxStepperService\r\n} from './ngx-stepper.service';\r\n\r\n\r\nexport class NgxStepComponent implements OnInit {\r\n  \r\n  public label: string;\r\n\r\n  \r\n  public optional: string;\r\n\r\n  public stepNumber: number;\r\n  public hasError: boolean;\r\n  public message: string;\r\n  public stepper: NgxStepperComponent;\r\n\r\n  constructor(private _ngxStepperService: NgxStepperService) {\r\n    this._ngxStepperService.isInitStepperCmp.subscribe((stepper: NgxStepperComponent) => {\r\n      this.stepper = stepper;\r\n    });\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this._ngxStepperService.isInitStepCmp.next(this);\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.stepper ? this.stepper.isActiveStep(this) : false;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ngx-step',\r\n  template: `\r\n    <div class=\"mat-step\" [ngClass]=\"{ 'mat-active': isActive() }\">\r\n      <div class=\"mat-stepper\" [ngClass]=\"{ 'mat-active': isActive() }\">\r\n        <div class=\"mat-steppers-header mat-steppers-vertical\">\r\n          <button class=\"mat-stepper-indicator\"\r\n                  [ngClass]=\"{'mat-active': stepNumber === stepper.currentStep,\r\n                              'mat-completed': stepper.isCompleted(stepNumber),\r\n                              'mat-error': hasError,\r\n                              'mat-stepper-optional': optional || hasError}\"\r\n                  (click)=\"stepper.goto(stepNumber)\"\r\n                  [disabled]=\"stepper.options.linear || stepNumber === stepper.currentStep\">\r\n            <div class=\"mat-stepper-indicator-wrapper\">\r\n              <div class=\"mat-stepper-number\" *ngIf=\"!hasError\"\r\n                   [ngClass]=\"{'mat-stepper-done': stepper.isCompleted(stepNumber)}\">\r\n                <span *ngIf=\"!stepper.isCompleted(stepNumber)\">{{ stepNumber + 1 }}</span>\r\n                <mat-icon class=\"mat-stepper-icon svg-icon\" svgIcon=\"step-done\"\r\n                         *ngIf=\"stepper.isCompleted(stepNumber) && stepper.options.enableSvgIcon\"></mat-icon>\r\n                <mat-icon class=\"mat-stepper-icon\"\r\n                         *ngIf=\"stepper.isCompleted(stepNumber) && !stepper.options.enableSvgIcon\">done</mat-icon>\r\n              </div>\r\n              <div class=\"mat-stepper-error-indicator\" *ngIf=\"hasError\">\r\n                <mat-icon *ngIf=\"stepper.options.enableSvgIcon\" svgIcon=\"step-warning\"></mat-icon>\r\n                <mat-icon *ngIf=\"!stepper.options.enableSvgIcon\">warning</mat-icon>\r\n              </div>\r\n\r\n              <div class=\"mat-stepper-title\">\r\n                <span>{{ label }}</span>\r\n                <small *ngIf=\"optional && !hasError\">{{ optional }}</small>\r\n                <small class=\"mat-stepper-error-message\" *ngIf=\"hasError\">\r\n                  {{ message }}\r\n                </small>\r\n              </div>\r\n            </div>\r\n          </button>\r\n          <div [hidden]=\"!stepper.hasFeedback\"></div>\r\n          <!--<div class=\"mat-stepper-feedback-message\" [hidden]=\"!stepper.hasFeedback\">-->\r\n          <!--{{stepper.feedbackMessage}}-->\r\n          <!--</div>-->\r\n        </div>\r\n        <div class=\"mat-steppers-scope\" [hidden]=\"!isActive()\">\r\n          <ng-content select=\"ngx-step-body\"></ng-content>\r\n          <ng-content select=\"ngx-step-actions\"></ng-content>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgxStepperService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'optional': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}