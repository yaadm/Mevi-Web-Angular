import { OnInit } from '@angular/core';
import { StepperOptions } from './ngx-stepper.model';
import { NgxStepComponent } from './ngx-step.component';
import { NgxStepperService } from './ngx-stepper.service';
export declare class NgxStepperComponent implements OnInit {
    private _ngxStepperService;
    options: StepperOptions;
    steps: NgxStepComponent[];
    currentStep: number;
    hasFeedback: boolean;
    feedbackMessage: string;
    constructor(_ngxStepperService: NgxStepperService);
    ngOnInit(): void;
    /**
     * Register component step to this stepper.
     *
     * @param {StepCtrl} step The step to add.
     * @returns number - The step number.
     */
    addStep(step: NgxStepComponent): number;
    /**
     * Complete the current step and move one to the next.
     * Using this method on editable steps (in linear stepper)
     * it will search by the next step without "completed" state to move.
     * When invoked it dispatch the event onstepcomplete to the step element.
     *
     * @returns boolean - True if move and false if not move (e.g. On the last step)
     */
    next(): boolean;
    /**
     * Move to the previous step without change the state of current step.
     * Using this method in linear stepper it will check if previous step is editable to move.
     *
     * @returns boolean - True if move and false if not move (e.g. On the first step)
     */
    back(): boolean;
    /**
     * Move to the next step without change the state of current step.
     * This method works only in optional steps.
     *
     * @returns boolean - True if move and false if not move (e.g. On non-optional step)
     */
    skip(): boolean;
    /**
     * Defines the current step state to "error" and shows the message parameter on
     * title message element.When invoked it dispatch the event onsteperror to the step element.
     *
     * @param {string} message The error message
     */
    error(message: string): void;
    /**
     * Defines the current step state to "normal" and removes the message parameter on
     * title message element.
     */
    clearError(): void;
    /**
     * Move "active" to specified step id parameter.
     * The id used as reference is the integer number shown on the label of each step (e.g. 2).
     *
     * @param {number} stepNumber (description)
     * @returns boolean - True if move and false if not move (e.g. On id not found)
     */
    goto(stepNumber: number): boolean;
    /**
     * Shows a feedback message and a loading indicador.
     *
     * @param {string} [message] The feedbackMessage
     */
    showFeedback(message?: string): void;
    /**
     * Removes the feedback.
     */
    clearFeedback(): void;
    isCompleted(stepNumber: number): boolean;
    isActiveStep(step: NgxStepComponent): boolean;
}
