"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ngx_stepper_service_1 = require("./ngx-stepper.service");
var NgxStepComponent = (function () {
    function NgxStepComponent(_ngxStepperService) {
        var _this = this;
        this._ngxStepperService = _ngxStepperService;
        this._ngxStepperService.isInitStepperCmp.subscribe(function (stepper) {
            _this.stepper = stepper;
        });
    }
    NgxStepComponent.prototype.ngOnInit = function () {
        this._ngxStepperService.isInitStepCmp.next(this);
    };
    NgxStepComponent.prototype.isActive = function () {
        return this.stepper ? this.stepper.isActiveStep(this) : false;
    };
    return NgxStepComponent;
}());
NgxStepComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'ngx-step',
                template: "\n    <div class=\"mat-step\" [ngClass]=\"{ 'mat-active': isActive() }\">\n      <div class=\"mat-stepper\" [ngClass]=\"{ 'mat-active': isActive() }\">\n        <div class=\"mat-steppers-header mat-steppers-vertical\">\n          <button class=\"mat-stepper-indicator\"\n                  [ngClass]=\"{'mat-active': stepNumber === stepper.currentStep,\n                              'mat-completed': stepper.isCompleted(stepNumber),\n                              'mat-error': hasError,\n                              'mat-stepper-optional': optional || hasError}\"\n                  (click)=\"stepper.goto(stepNumber)\"\n                  [disabled]=\"stepper.options.linear || stepNumber === stepper.currentStep\">\n            <div class=\"mat-stepper-indicator-wrapper\">\n              <div class=\"mat-stepper-number\" *ngIf=\"!hasError\"\n                   [ngClass]=\"{'mat-stepper-done': stepper.isCompleted(stepNumber)}\">\n                <span *ngIf=\"!stepper.isCompleted(stepNumber)\">{{ stepNumber + 1 }}</span>\n                <mat-icon class=\"mat-stepper-icon svg-icon\" svgIcon=\"step-done\"\n                         *ngIf=\"stepper.isCompleted(stepNumber) && stepper.options.enableSvgIcon\"></mat-icon>\n                <mat-icon class=\"mat-stepper-icon\"\n                         *ngIf=\"stepper.isCompleted(stepNumber) && !stepper.options.enableSvgIcon\">done</mat-icon>\n              </div>\n              <div class=\"mat-stepper-error-indicator\" *ngIf=\"hasError\">\n                <mat-icon *ngIf=\"stepper.options.enableSvgIcon\" svgIcon=\"step-warning\"></mat-icon>\n                <mat-icon *ngIf=\"!stepper.options.enableSvgIcon\">warning</mat-icon>\n              </div>\n\n              <div class=\"mat-stepper-title\">\n                <span>{{ label }}</span>\n                <small *ngIf=\"optional && !hasError\">{{ optional }}</small>\n                <small class=\"mat-stepper-error-message\" *ngIf=\"hasError\">\n                  {{ message }}\n                </small>\n              </div>\n            </div>\n          </button>\n          <div [hidden]=\"!stepper.hasFeedback\"></div>\n          <!--<div class=\"mat-stepper-feedback-message\" [hidden]=\"!stepper.hasFeedback\">-->\n          <!--{{stepper.feedbackMessage}}-->\n          <!--</div>-->\n        </div>\n        <div class=\"mat-steppers-scope\" [hidden]=\"!isActive()\">\n          <ng-content select=\"ngx-step-body\"></ng-content>\n          <ng-content select=\"ngx-step-actions\"></ng-content>\n        </div>\n      </div>\n    </div>\n  "
            },] },
];
/** @nocollapse */
NgxStepComponent.ctorParameters = function () { return [
    { type: ngx_stepper_service_1.NgxStepperService, },
]; };
NgxStepComponent.propDecorators = {
    'label': [{ type: core_1.Input },],
    'optional': [{ type: core_1.Input },],
};
exports.NgxStepComponent = NgxStepComponent;
//# sourceMappingURL=ngx-step.component.js.map